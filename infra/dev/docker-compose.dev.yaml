services:
  djangodb:
    container_name: db
    image: postgres:14.0-alpine
    restart: always
    volumes:
      - postgres_db_data:/var/lib/postgresql/data/
    environment:
      - DB_HOST=djangodb
      - DB_PORT=5432
      - POSTGRES_DB=django
      - POSTGRES_USER=django
      - POSTGRES_PASSWORD=django
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U django -d django -h db -p 5432"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  botapi:
    container_name: botapi
    build:
      context: ../../
      dockerfile: infra/dev/Dockerfile
    restart: on-failure
    environment:
      - DB_ENGINE=django.db.backends.postgresql
      - DB_HOST=djangodb
      - DB_PORT=5432
      - POSTGRES_DB=django
      - POSTGRES_USER=django
      - POSTGRES_PASSWORD=django
      - DJANGO_SECRET_KEY=django-secret-key
      - DEBUG=False
      - DJANGO_ALLOWED_HOSTS=botapi,localhost
      - CSRF_TRUSTED_ORIGINS=http://botapi:8000,http://localhost
      - SU_USERNAME=admin
      - SU_TELEGRAM_ID=1234567890
      - SU_PASSWORD=admin
    volumes:
      - static_backend:/app/bot_api/staticfiles/
    ports:
      - 8000:8000
    depends_on:
      djangodb:
          condition: service_healthy

  nginx:
    container_name: nginx
    image: nginx:latest
    restart: always
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - static_backend:/var/html/staticfiles/
    ports:
      - 80:80
    depends_on:
      - botapi
      - djangodb

  telegram_bot:
    container_name: telegram_bot
    build:
      context: ../../
      dockerfile: infra/dev/Dockerfile.bot
    restart: on-failure
    environment:
      - TELEGRAM_BOT_TOKEN="Токен вашего бота"
      - TELEGRAM_BOT_USERNAME="Имя вашего бота"
      - DJANGO_API_URL=http://botapi:8000/link-telegram/
    ports:
      - 8080:8080
    depends_on:
      nginx:
        condition: service_started

volumes:
  postgres_db_data:
  static_backend:
